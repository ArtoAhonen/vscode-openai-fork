{
  "name": "vscode-openai",
  "displayName": "vscode-openai",
  "description": "vscode-openai extension provides access to openai features. Now features sponsored (free) openai service.",
  "version": "1.1.11",
  "publisher": "AndrewButson",
  "icon": "images/logo_128x128.png",
  "private": true,
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/arbs-io/vscode-openai-docs.git"
  },
  "sponsor": {
    "url": "https://github.com/sponsors/arbs-io"
  },
  "engines": {
    "vscode": "^1.78.0"
  },
  "categories": [
    "Other",
    "Machine Learning",
    "Programming Languages",
    "Data Science",
    "Testing"
  ],
  "keywords": [
    "ai",
    "chatgpt",
    "codex",
    "copilot",
    "gpt",
    "gpt3",
    "gpt4",
    "openai",
    "azureopenai",
    "azure-openai",
    "azure",
    "testing"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "browser": "./out/extension.js",
  "contributes": {
    "languages": [
      {
        "id": "vscode-openai-log"
      }
    ],
    "grammars": [
      {
        "language": "vscode-openai-log",
        "scopeName": "vscode-openai.log",
        "path": "./assets/log.tmLanguage.json"
      }
    ],
    "icons": {
      "vscode-openai": {
        "description": "vscode-openai",
        "default": {
          "fontPath": "./assets/vscode-openai.woff",
          "fontCharacter": "\\E900"
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "vscode-openai-sidebar-view",
          "title": "vscode-openai",
          "icon": "./assets/openai-sidebar.svg",
          "when": "vscode-openai.extension.enabled"
        }
      ]
    },
    "views": {
      "vscode-openai-sidebar-view": [
        {
          "type": "webview",
          "id": "vscode-openai.sidebar.personaWebview",
          "name": "Persona",
          "icon": "./assets/openai-sidebar.svg",
          "contextualTitle": "vscode-openai personas",
          "when": "vscode-openai.extension.enabled"
        },
        {
          "type": "webview",
          "id": "vscode-openai.sidebar.conversationsWebview",
          "name": "Conversations",
          "icon": "./assets/openai-sidebar.svg",
          "contextualTitle": "vscode-openai conversations",
          "when": "vscode-openai.extension.enabled"
        },
        {
          "id": "vscode-openai.sidebar.fileEmbeddingTreeDataProvider",
          "name": "File Embedding",
          "icon": "./assets/openai-sidebar.svg",
          "contextualTitle": "vscode-openai conversations",
          "when": "vscode-openai.extension.enabled"
        }
      ]
    },
    "configuration": {
      "title": "vscode-openai",
      "properties": {
        "vscode-openai.serviceProvider": {
          "type": "string",
          "default": "OpenAI",
          "markdownDescription": "The service provider for OpenAI. If Microsoft Azure then instance name must be updated in `#vscode-openai.baseUrl#`.",
          "enum": [
            "VSCode-OpenAI",
            "OpenAI",
            "Azure-OpenAI"
          ],
          "enumDescriptions": [
            "Use VSCode-OpenAI Sponsored service",
            "Use OpenAI native service (https://api.openai.com)",
            "Use Azure OpenAI service (https://instance-name.openai.azure.com/openai)."
          ],
          "order": 1
        },
        "vscode-openai.authentication": {
          "type": "string",
          "default": "ApiKey",
          "markdownDescription": "The type of authentication used by the service.",
          "enum": [
            "ApiKey"
          ],
          "enumDescriptions": [
            "Use OpenAI API keys for authentication. Visit your API Keys page to retrieve the API key you'll use in your requests."
          ],
          "order": 2
        },
        "vscode-openai.baseUrl": {
          "type": "string",
          "default": "https://api.openai.com/v1",
          "markdownDescription": "The base url for the OpenAI service dependencies on `#vscode-openai.serviceProvider#`.\n- `OpenAI` then default `https://api.openai.com/v1`\n- `openai.azure.com` then default `https://<instance-name>.openai.azure.com/openai`",
          "format": "url",
          "description": "Specifies the base url for the openai service.",
          "order": 3
        },
        "vscode-openai.defaultModel": {
          "type": "string",
          "default": "gpt-3.5-turbo",
          "description": "Specifies the default openai model.",
          "order": 4
        },
        "vscode-openai.azureDeployment": {
          "type": "string",
          "default": "azure-deployment",
          "markdownDescription": "The name of the Azure deployment (model). Only applies when `#vscode-openai.serviceProvider#` is `Azure-OpenAI`.",
          "format": "url",
          "description": "Specifies the base url for the openai service.",
          "order": 5
        },
        "vscode-openai.azureApiVersion": {
          "type": "string",
          "default": "2023-05-15",
          "markdownDescription": "The api version used by Azure deployment (model). Only applies when `#vscode-openai.serviceProvider#` is `Azure-OpenAI`. Note: limited to versions that support chat completion.",
          "enum": [
            "2023-05-15"
          ],
          "enumDescriptions": [
            "The initial azure api that support chat completion."
          ],
          "order": 6
        },
        "vscode-openai.conversationHistory": {
          "type": "number",
          "default": 6,
          "markdownDescription": "The number of previous messages sent to the current prompt.",
          "minimum": 0,
          "maximum": 25,
          "description": "Specifies the base url for the openai service.",
          "order": 7
        },
        "vscode-openai.logLevel": {
          "type": "string",
          "default": "Info",
          "markdownDescription": "The output level for vscode-openai.",
          "enum": [
            "Debug",
            "Info",
            "Error"
          ],
          "enumDescriptions": [
            "Debug messages for fine-grained events within vscode-openai",
            "Information messages about the progress of vscode-openai and external services",
            "Error messages for events that could potentially cause issues for vscode-openai"
          ],
          "order": 8
        },
        "vscode-openai.prompt-editor.comment": {
          "type": "string",
          "default": "vscode-openai is a programming expert in #{language} programming language.\nvscode-openai response must only use valid source code for #{language} programming language.\nPlease add comments to the source code explaining what the code is doing.\nThe code to analyze is below:\n#{source_code}",
          "editPresentation": "multilineText",
          "markdownDescription": "This prompt is designed to place inline comments into the `source code`\n- Author: **vscode-openai**",
          "description": "Edit prompt optimize.",
          "order": 9
        },
        "vscode-openai.prompt-editor.explain": {
          "type": "string",
          "default": "vscode-openai is a programming expert in #{language} programming language.\nvscode-openai response must only use valid source code for #{language} programming language.\nPlease provide headers comments in the source code for each function providing:\n- description, input and output parameters.\n- input parameters.\n- output parameters.\nThe code to analyze is below:\n#{source_code}",
          "editPresentation": "multilineText",
          "markdownDescription": "This prompt is designed to place header comments for each class or function within the `source code`\n- Author: **Bryon Roscoe**",
          "order": 10
        },
        "vscode-openai.prompt-editor.bounty": {
          "type": "string",
          "default": "vscode-openai is a programming expert in #{language} programming language.\nvscode-openai response must only use valid source code for #{language} programming language.\nPlease fix any bugs and include comments for the changed code explaining what was wrong with the original code.\nOnly provide the fixed source code with comments in #{language} explaining the corrected problem.\nThe code to analyze is below:\n#{source_code}",
          "editPresentation": "multilineText",
          "markdownDescription": "This prompt is designed to find and fix bugs within the `source code`\n- Author: **Ed Linden**",
          "order": 11
        },
        "vscode-openai.prompt-editor.optimize": {
          "type": "string",
          "default": "vscode-openai is a programming expert in #{language} programming language.\nvscode-openai response must only use valid source code for #{language} programming language.\nPlease optimize the source code by reducing the number of operations performed during execution.\nDo not change the functionality of the code.\nThe code to analyze is below:\n#{source_code}",
          "editPresentation": "multilineText",
          "markdownDescription": "This prompt is designed to find inefficiencies and resolve them within the `source code`\n- Author: **vscode-openai**",
          "order": 12
        },
        "vscode-openai.prompt-editor.patterns": {
          "type": "string",
          "default": "vscode-openai is a programming expert in #{language} programming language.\nvscode-openai response must only use valid source code for #{language} programming language.\nPlease rewrite the code using appropriate design patterns.\nThe design pattern should combine Concurrency, Behavioral, Structural and Creational design patterns.\nThe response should be a single solution using all the valuable patterns identified.\nDo not change the functionality of the code.\nThe code to analyze is below:\n#{source_code}",
          "editPresentation": "multilineText",
          "markdownDescription": "This prompt is designed to suggest design patterns to improve readability, maintainability, ... in the `source code`\n- Author: **vscode-openai**",
          "order": 13
        }
      }
    },
    "menus": {
      "view/item/context": [
        {
          "command": "vscode-openai.embedding.conversation",
          "when": "view == vscode-openai.sidebar.fileEmbeddingTreeDataProvider",
          "group": "inline"
        },
        {
          "command": "vscode-openai.embedding.delete",
          "when": "view == vscode-openai.sidebar.fileEmbeddingTreeDataProvider",
          "group": "inline"
        }
      ],
      "view/title": [
        {
          "command": "vscode-openai.conversation.new-default",
          "when": "view == vscode-openai.sidebar.conversationsWebview",
          "group": "navigation"
        },
        {
          "command": "vscode-openai.conversation.new-persona",
          "when": "view == vscode-openai.sidebar.conversationsWebview",
          "group": "navigation"
        }
      ],
      "scm/title": [
        {
          "command": "vscode-openai.scm.comment",
          "group": "navigation",
          "icon": {
            "light": "./assets/openai-light.png",
            "dark": "./assets/openai-dark.png"
          },
          "when": "vscode-openai.extension.enabled && vscode-openai.scm.enabled && scmProvider == git"
        }
      ],
      "editor/title": [
        {
          "submenu": "vscode-openai.menu.toolbox",
          "group": "navigation",
          "when": "editorFocus && !editorReadonly"
        }
      ],
      "vscode-openai.menu.toolbox": [
        {
          "command": "vscode-openai.prompt-editor.comment",
          "group": "navigation.openai_1",
          "when": "vscode-openai.extension.enabled"
        },
        {
          "command": "vscode-openai.prompt-editor.explain",
          "group": "navigation.openai_1",
          "when": "vscode-openai.extension.enabled"
        },
        {
          "command": "vscode-openai.prompt-editor.bounty",
          "group": "navigation.openai_1",
          "when": "vscode-openai.extension.enabled"
        },
        {
          "command": "vscode-openai.prompt-editor.optimize",
          "group": "navigation.openai_1",
          "when": "vscode-openai.extension.enabled"
        },
        {
          "command": "vscode-openai.prompt-editor.patterns",
          "group": "navigation.openai_1",
          "when": "vscode-openai.extension.enabled"
        },
        {
          "command": "vscode-openai.settings.prompt-editor",
          "group": "navigation.openai_2",
          "when": "vscode-openai.extension.enabled"
        }
      ]
    },
    "submenus": [
      {
        "id": "vscode-openai.menu.toolbox",
        "label": "vscode-openai.menu.toolbox",
        "icon": {
          "light": "./assets/openai-light.png",
          "dark": "./assets/openai-dark.png"
        },
        "when": "editorFocus && !editorReadonly"
      }
    ],
    "commands": [
      {
        "command": "vscode-openai.conversation.new-default",
        "title": "New default conversation...",
        "category": "vscode-openai.conversation",
        "icon": "$(comment)"
      },
      {
        "command": "vscode-openai.conversation.new-persona",
        "title": "New persona conversation...",
        "category": "vscode-openai.conversation",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "vscode-openai.embedding.conversation",
        "title": "Edit Prompts...",
        "category": "vscode-openai.embedding",
        "icon": {
          "light": "./assets/openai-light.png",
          "dark": "./assets/openai-dark.png"
        }
      },
      {
        "command": "vscode-openai.embedding.delete",
        "title": "Edit Prompts...",
        "category": "vscode-openai.embedding",
        "icon": "$(notebook-delete-cell)"
      },
      {
        "command": "vscode-openai.settings.prompt-editor",
        "title": "Edit Prompts...",
        "category": "vscode-openai.settings"
      },
      {
        "command": "vscode-openai.scm.comment",
        "title": "Auto generate comments using OpenAI",
        "category": "vscode-openai.scm",
        "icon": {
          "light": "./assets/openai-light.png",
          "dark": "./assets/openai-dark.png"
        },
        "when": "vscode-openai.extension.enabled && vscode-openai.scm.enabled && scmProvider == git"
      },
      {
        "command": "vscode-openai.register.openaiService",
        "title": "Register OpenAI Service",
        "category": "vscode-openai.register",
        "icon": {
          "light": "./assets/openai-light.png",
          "dark": "./assets/openai-dark.png"
        }
      },
      {
        "command": "vscode-openai.prompt-editor.comment",
        "title": "Comments",
        "category": "vscode-openai.completion"
      },
      {
        "command": "vscode-openai.prompt-editor.explain",
        "title": "Explanation",
        "category": "vscode-openai.completion"
      },
      {
        "command": "vscode-openai.prompt-editor.bounty",
        "title": "Bug Bounty",
        "category": "vscode-openai.completion"
      },
      {
        "command": "vscode-openai.prompt-editor.optimize",
        "title": "Optimize",
        "category": "vscode-openai.completion"
      },
      {
        "command": "vscode-openai.prompt-editor.patterns",
        "title": "Design Patterns",
        "category": "vscode-openai.completion"
      }
    ]
  },
  "scripts": {
    "install:all": "npm install && npm-run-all --parallel install:all:*",
    "install:all:messageWebview": "npm --prefix ./webview-ui/messageWebview install",
    "install:all:personaWebview": "npm --prefix ./webview-ui/personaWebview install",
    "install:all:conversationsWebview": "npm --prefix ./webview-ui/conversationsWebview install",
    "build:webview": "npm-run-all --parallel build:webview:*",
    "build:webview:messageWebview": "npm --prefix ./webview-ui/messageWebview run build",
    "build:webview:personaWebview": "npm --prefix ./webview-ui/personaWebview run build",
    "build:webview:conversationsWebview": "npm --prefix ./webview-ui/conversationsWebview run build",
    "vscode:prepublish": "npm run esbuild-base -- --minify",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run -S esbuild-base -- --sourcemap --watch",
    "test-compile": "tsc -p ./",
    "deploy": "vsce publish --yarn"
  },
  "devDependencies": {
    "@types/node": "^20.2.1",
    "@types/vscode": "^1.78.0",
    "@typescript-eslint/eslint-plugin": "^5.59.6",
    "@typescript-eslint/parser": "^5.59.6",
    "@vscode/vsce": "^2.19.0",
    "esbuild": "^0.17.19",
    "eslint": "^8.41.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.0.4"
  },
  "dependencies": {
    "@vscode/extension-telemetry": "^0.8.0",
    "openai": "^3.2.1"
  }
}
